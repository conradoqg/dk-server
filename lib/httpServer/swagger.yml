swagger: "2.0"
info:
  title: DK API
  description: |
    <h2>Getting started</h2>    
    <ul>
      <li>Create an admin user using the initial token from console: POST to /users</li>
      <li>Create a token using the previously created user: POST to /tokens</li>
      <li>Create a stack template: POST to /templates/stacks</li>
      <li>Create a stack using the template name: POST to /stacks</li>
    </ul><br>
    <h2>Rate Limit</h2>
    The resources have a limited amount of requests as following:
    <ul>
      <li> All endpoints: 15 minutes window for 100 requests </li>
      <li> User creation: 1 day window for 2 requests </li>
    </ul><br>
    <h2>User types</h2>
    There are two types of users:
    <ul>
      <li> User: Can create and delete its own stack</li>
      <li> Admin: Can do everything else </li>
    </ul>
  version: 1.0.0

basePath: /
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:   
    JWTAuthorization:
      type: apiKey
      in: header
      name: Authorization

paths:
  /ping:
    get:
      tags:
        - general    
      summary: Get a ping response
      description: Check if the API is responding to requests.
      responses:
        200:
          description: OK
          schema:
            type: string
        429:
          $ref: "#/responses/TooManyRequests"   
  /healthcheck:
    get:
      tags:
        - general    
      summary: Get the healthcheck information
      description: Check if the API is healthy, meaning that it can talk to database and docker.
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              healthy:
                type: boolean
        429:
          $ref: "#/responses/TooManyRequests"   
  /stacks:
    get:
      tags:
        - stacks
      summary: Get stacks
      description: All running stacks from an user or all for admins.
      security:
        - JWTAuthorization: []
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Stack"
        429:
          $ref: "#/responses/TooManyRequests"   
        401:          
          $ref: "#/responses/Unauthorized"
    post:
      tags:
        - stacks
      summary: Create a stack
      description: |
        Create a stack using a stack template name. 
        Users have a limited amount of stacks that they can run and can only use pre-defined templates.
        Admins does not have a limitation and can start a stack from a template directly.
      security:
        - JWTAuthorization: []
      parameters:
        -
          in: body
          name: body
          description: Stack creation request
          required: true,
          schema:
            type: object
            required:
              - stackTemplateName
            properties:
              stackTemplateName: 
                type: string
              stackName:
                type: string
              stackTemplateData:
                type: string
                description: A template can be send directly by an admin instead of a pre-defined stack template.
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              stackName:
                type: string
        429:
          $ref: "#/responses/TooManyRequests"   
        401:          
          $ref: "#/responses/Unauthorized"
        400:
          description: BadRequest - Stack template not found or max stacks for user reached or invalid JSON body
          schema:
            $ref: "#/definitions/Error"        
  /stacks/{stackName}:
    get:
      tags:
        - stacks
      summary: Get a stack
      description: Get a runnig stack by name from a user or all for admins.
      security:
        - JWTAuthorization: []
      parameters:
        -
          in: path
          name: stackName
          description: Stack name
          required: true,
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Stack"
        429:
          $ref: "#/responses/TooManyRequests"   
        404:
          description: Not Found - Stack not found for user
          schema:
            $ref: "#/definitions/Error"
        401:          
          $ref: "#/responses/Unauthorized"
        400:
          description: Bad Request - The stackName parameter must be a string
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - stacks
      summary: Delete a stack
      description: Delete a running stack by name from a user or any for admins.
      security:
        - JWTAuthorization: []
      parameters:
        -
          in: path
          name: stackName
          description: Stack name
          required: true,
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              success:
                type: boolean   
        429:
          $ref: "#/responses/TooManyRequests"            
        404:
          description: Not Found - Stack not found for user
          schema:
            $ref: "#/definitions/Error"
        401:          
          $ref: "#/responses/Unauthorized"
        400:
          description: Bad Request - The stackName parameter must be a string
          schema:
            $ref: "#/definitions/Error"  
  /stacks/{stackName}/services/{serviceID}/logs:      
    get:
      tags:
        - stacks
      summary: Get the log of a service of a stack
      description: Get the log of a service of a stack from a user or all for admins.
      security:
        - JWTAuthorization: []
      parameters:
        -
          in: path
          name: stackName
          description: Stack name
          required: true,
          type: string
        -
          in: path
          name: serviceID
          description: Service ID
          required: true,
          type: string
      responses:
        200:
          description: OK
          schema:
            type: string
        429:
          $ref: "#/responses/TooManyRequests"   
        404:
          description: Not Found - Stack not found for user
          schema:
            $ref: "#/definitions/Error"
        401:          
          $ref: "#/responses/Unauthorized"
        400:
          description: Bad Request - The stackName parameter must be a string or The serviceID parameter must be a string
          schema:
            $ref: "#/definitions/Error"
  /templates/stacks:
    get:
      tags:
        - stack templates
      summary: Get stack templates
      description: All existing stack templates are returned. Only for admins.
      security:
        - JWTAuthorization: []
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/StackTemplate"
        429:
          $ref: "#/responses/TooManyRequests"   
        401:          
          $ref: "#/responses/Unauthorized"
    post:
      tags:
        - stack templates
      summary: Create a stack template
      description: Create a stack template from a yaml file. Only for admins.
      security:
        - JWTAuthorization: []    
      parameters:
        -
          in: body
          name: body
          description: Stack template creation request
          required: true,
          schema:
            $ref: "#/definitions/StackTemplate"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StackTemplate"
        429:
          $ref: "#/responses/TooManyRequests"   
        403:
          description: Forbidden - The user is not authorized to do this operation
          schema:
            $ref: "#/definitions/Error" 
        401:          
          $ref: "#/responses/Unauthorized"
        400:
          description: BadRequest - Template already exist or invalid JSON body
          schema:
            $ref: "#/definitions/Error" 
    put:
      tags:
        - stack templates
      summary: Update a stack template
      description: Update a stack template from a yaml file using the stack template name. Only for admins.
      security:
        - JWTAuthorization: []
      parameters:
        -
          in: body
          name: body
          description: Stack template update request
          required: true,
          schema:
            $ref: "#/definitions/StackTemplate"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StackTemplate"
        429:
          $ref: "#/responses/TooManyRequests"   
        403:
          description: Forbidden - The user is not authorized to do this operation
          schema:
            $ref: "#/definitions/Error" 
        401:          
          $ref: "#/responses/Unauthorized"
        400:
          description: BadRequest - Template already exist or invalid JSON body
          schema:
            $ref: "#/definitions/Error" 
  /templates/stacks/{stackTemplateName}:
    get:
      tags:
        - stack templates
      summary: Get a stack template
      description: Get a stack template by name. Only for admins.
      security:
        - JWTAuthorization: []
      parameters:
        -
          in: path
          name: stackTemplateName
          description: Stack template name
          required: true,
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StackTemplate"
        429:
          $ref: "#/responses/TooManyRequests"   
        404:
          description: Not Found - Stack template not found
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Forbidden - The user is not authorized to do this operation
          schema:
            $ref: "#/definitions/Error" 
        401:          
          $ref: "#/responses/Unauthorized"
        400:
          description: Bad Request - The stackTemplateName parameter must be a string
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - stack templates
      summary: Delete a stack template
      description: Delete a stack template by name. Only for admins.
      security:
        - JWTAuthorization: []
      parameters:
        -
          in: path
          name: stackTemplateName
          description: Stack template name
          required: true,
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StackTemplate"
        429:
          $ref: "#/responses/TooManyRequests"   
        404:
          description: Not Found - Stack template not found
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Forbidden - The user is not authorized to do this operation
          schema:
            $ref: "#/definitions/Error" 
        401:          
          $ref: "#/responses/Unauthorized"        
        400:
          description: Bad Request - The stackTemplateName parameter must be a string
          schema:
            $ref: "#/definitions/Error"
  /users:
    get:
      tags:
        - users
      summary: Get users
      description: Get all users. Only for admins.
      security:
        - JWTAuthorization: []
      responses:
        200:
            description: OK
            schema:
              type: array
              items:
                $ref: "#/definitions/UserResponse"
        429:
          $ref: "#/responses/TooManyRequests"   
        403:
            description: Forbidden - The user is not authorized to list users
            schema:
              $ref: "#/definitions/Error" 
    post:
      tags:
        - users
      summary: Create a user
      description: Create a user
      security:
        - JWTAuthorization: []
      parameters:
        -
          in: body
          name: body
          description: User creation request
          required: true,
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/UserResponse"
        429:
          $ref: "#/responses/TooManyRequests"   
        400:
          description: BadRequest - The parameter name and/or password must be a string or the password doesn't meet policy criteria or the user already exists or invalid JSON body
          schema:
            $ref: "#/definitions/Error" 
    put:
      tags:
        - users
      summary: Update a user
      description: Update a user password or type. User can only update its user password and admins can update the type of an user.
      security:
        - JWTAuthorization: []
      parameters:
        -
          in: body
          name: body
          description: User update request
          required: true,
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/UserResponse"
        429:
          $ref: "#/responses/TooManyRequests"   
        403:
          description: Forbidden - The user is not authorized to update user
          schema:
            $ref: "#/definitions/Error" 
        401:          
          $ref: "#/responses/Unauthorized"
        400:
          description: BadRequest - The parameter name must be a string or the password doesn't meet policy criteria or the user doesn't exist or invalid JSON body
          schema:
            $ref: "#/definitions/Error"
  /tokens:
    post:
      tags:
        - tokens
      summary: Create a token
      description: Create a token using name and password. If LDAP is activated, it tries to authenticate against it. It's not necessary to create an user to use LDAP authentication.
      parameters:
        -
          in: body
          name: body
          description: Token creation request
          required: true,
          schema:
            type: object
            required:
              - name
              - password
            properties:
              name:
                type: string
              password:
                type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              token:
                type: string  
        429:
          $ref: "#/responses/TooManyRequests"   
        401:
          $ref: "#/responses/Unauthorized"              
        400:
          description: BadRequest - The parameter name and/or password must be a string or invalid username and/or password or invalid JSON body
          schema:
            $ref: "#/definitions/Error"
  /admin/config:
    get:
      tags:
        - admin
      summary: Get the configuration
      description: Get the configuration. Only for admins.
      security:
        - JWTAuthorization: []
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Configuration"
        429:
          $ref: "#/responses/TooManyRequests"   
        403:
          description: Forbidden - The user is not authorized to do this operation
          schema:
            $ref: "#/definitions/Error"   
        401:
          $ref: "#/responses/Unauthorized"             
    put:
      tags:
        - admin
      summary: Update configuration
      description: Update configuration. Only for admins.
      security:
        - JWTAuthorization: []
      parameters:
        -
          in: body
          name: body
          description: Configuration
          required: true,
          schema:
            $ref: "#/definitions/Configuration"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Configuration"
        429:
          $ref: "#/responses/TooManyRequests"   
        403:
          description: Forbidden - The user is not authorized to do this operation
          schema:
            $ref: "#/definitions/Error"   
        401:
          $ref: "#/responses/Unauthorized"   
        400:
          description: BadRequest - Invalid JSON body
          schema:
            $ref: "#/definitions/Error"
  /admin/metrics:
    get:
      tags:
        - admin
      summary: Get metrics
      description: Get all metrics for the current running session. Only for admins.
      security:
        - JWTAuthorization: []
      responses:
        200:
          description: OK  
        429:
          $ref: "#/responses/TooManyRequests"
        403:
            description: Forbidden - The user is not authorized to do this operation
            schema:
              $ref: "#/definitions/Error"
        401:
          $ref: "#/responses/Unauthorized"   
        400:
          description: BadRequest - Invalid JSON body
          schema:
            $ref: "#/definitions/Error"           

responses:
  Unauthorized:
    description: Unauthorized - Authorization header missing or failed to authenticate token
    schema:
      $ref: "#/definitions/Error"
  TooManyRequests: 
    description: Too Many Requests - Too many requests, please try again after x time
    schema:
      $ref: "#/definitions/Error"

definitions:
  Stack:
    type: object
    properties:
      name: 
        type: string
      services: 
        type: array
        items: 
          $ref: "#/definitions/Service"
  Service:
    type: object
    properties:
      id:
        type: string
      createdAt:
        type: string
      name:
        type: string
      image: 
        type: string
      username: 
        type: string
      ports:
        type: array
        items:
          type: integer
      tasks:
        type: array
        items:
          $ref: "#/definitions/Task"
  Task:
    type: object
    properties:
      createdAt:
        type: string
      state:
        type: string
      node:
        $ref: "#/definitions/Node"
  Node:
    type: object
    properties:
      state:
        type: string
      addr:
        type: string
  StackTemplate:
    type: object
    required:
      - name
      - data
    properties:
      name:
        type: string
      data:
        type: string
  User:
    type: object
    properties:
      name:
        type: string
      password:
        type: string
      type:
        type: string
    required:
      - name
      - password
      - type
  UserResponse:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
    required:
      - name
      - type
  Configuration:
    type: object
    properties:
      maxStacksPerUser:
        type: integer
        default: 2
      serviceType:
        type: string
        default: dk_stack
      ldap:
        type: object
        properties: 
          url:
            type: string
            example: ldap://ldap.forumsys.com:389
          bindDN:
            type: string
            example: cn=read-only-admin,dc=example,dc=com
          bindCredentials:
            type: string
            example: password
          searchBase:
            type: string
            example: dc=example,dc=com
          searchFilter:
            type: string  
            example: (uid={{username}})      
    required:
      - maxStacksPerUser
      - serviceType
  Error:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string


